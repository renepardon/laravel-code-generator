<?php

namespace [% namespace %];

[% use_command_placeholder %]
use Exception;
use Vyuldashev\LaravelOpenApi\Annotations\Operation;
use Vyuldashev\LaravelOpenApi\Annotations\Parameters;
use Vyuldashev\LaravelOpenApi\Annotations\PathItem;
use Vyuldashev\LaravelOpenApi\Annotations\Response;

/**
 * @PathItem()
 */
class [% controller_name %] [% controller_extends %]
{
[% constructor %]
    /**
     * Display a listing of the assets.
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="List[% model_name_class %]")
     * @Response(factory="List[% model_name_class %]Response")
     */
    public function index()
    {
        /** @var \Illuminate\Pagination\LengthAwarePaginator $[% model_name_plural_variable %] */
        $[% model_name_plural_variable %] = [% model_name_class %]::[% with_relations_for_index %]paginate([% models_per_page %]);

        [% index_return_success %]
    }

    /**
     * Display listing of the assets for all provided id's
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="ListMultiple[% model_name_class %]")
     * @Response(factory="List[% model_name_class %]Response")
     */
    public function multipleByIdList()
    {
        /** @var \Illuminate\Pagination\LengthAwarePaginator $[% model_name_plural_variable %] */
        $[% model_name_plural_variable %] = [% model_name_class %]::[% with_relations_for_index %]whereIn('id', $request->get('id', []))->paginate([% models_per_page %]);

        [% index_return_success %]
    }

    /**
     * Store a new [% model_name %] in the storage.
     *
     * @param \[% request_fullname %] [% request_variable %]
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="Store[% model_name_class %]")
     * @Parameters(factory="[% model_name_class %]Parameters")
     * @Response(factory="Show[% model_name_class %]Response")
     * @Response(factory="ErrorValidationResponse", statusCode=422)
     */
    public function store([% type_hinted_request_name %])
    {
        [% validator_request %]
        $[% data_variable %] = [% call_get_data %];
        [% on_store_setter %]
        $[% model_name_singular_variable %] = [% model_name_class %]::create($[% data_variable %]);

        [% store_return_success %]
    }

    /**
     * Display the specified [% model_name %].
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="Show[% model_name_class %]")
     * @Response(factory="Show[% model_name_class %]Response")
     * @Response(factory="ErrorNotFoundResponse", statusCode=404)
     */
    public function show($id)
    {
        $[% model_name_singular_variable %] = [% model_name_class %]::[% with_relations_for_show %]findOrFail($id);

        [% show_return_success %]
    }

    /**
     * Update the specified [% model_name %] in the storage.
     *
     * @param int $id
     * @param \[% request_fullname %] [% request_variable %]
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="Update[% model_name_class %]")
     * @Parameters(factory="[% model_name_class %]Parameters")
     * @Response(factory="Show[% model_name_class %]Response")
     * @Response(factory="ErrorNotFoundResponse", statusCode=404)
     * @Response(factory="ErrorValidationResponse", statusCode=422)
     */
    public function update($id, [% type_hinted_request_name %])
    {
        [% validator_request %]
        $[% data_variable %] = [% call_get_data %];
        [% on_update_setter %]
        $[% model_name_singular_variable %] = [% model_name_class %]::findOrFail($id);
        $[% model_name_singular_variable %]->update($[% data_variable %]);

        [% update_return_success %]
    }

    /**
     * Remove the specified [% model_name %] from the storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     *
     * @Operation(id="Delete[% model_name_class %]")
     * @Response(factory="Show[% model_name_class %]Response")
     * @Response(factory="ErrorNotFoundResponse", statusCode=404)
     */
    public function destroy($id)
    {
        $[% model_name_singular_variable %] = [% model_name_class %]::findOrFail($id);
        $[% model_name_singular_variable %]->delete();

        [% destroy_return_success %]
    }
[% get_validator_method %]
[% get_data_method %]
[% upload_method %]
[% transform_method %]
[% response_methods %]
}
